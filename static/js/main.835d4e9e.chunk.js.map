{"version":3,"sources":["operators/components/operator.tsx","operators/components/sum.tsx","operators/components/Subtract.tsx","operators/components/multiplication.tsx","operators/components/div.tsx","operators/components/assignMethod.tsx","operators/components/assing.tsx","dragAndDrop/OperatorColumn.tsx","dragAndDrop/FormulaColumn.tsx","App.js","index.js"],"names":["Operator","onchangeLeftInput","onchangeRightInput","children","Box","style","display","backgroundColor","width","alignItems","padding","borderRadius","TextField","onChange","Sum","useState","left","setLeft","right","setRight","structureSum","setStructureSum","useEffect","length","add","JSON","parse","console","log","event","valueLeft","target","value","valueRight","Subtract","structureSubtract","setStructureSubtract","sub","Multiplication","structureMultiplication","setStructureMultiplication","mul","Div","structureDiv","setStructureDiv","truediv","AssignMethod","Assign","React","Children","forEach","element","isValidElement","props","structureEqual","setStructureEqual","assign","OperatorColumn","column","items","title","droppableId","id","droppableProvider","margin","droppableProps","ref","innerRef","map","item","i","draggableId","index","draggableProvider","draggableProps","dragHandleProps","components","placeholder","FormulaColumn","minWidth","minHeight","height","justifyContent","App","init_state","operators","setOperators","columnOperatorOrderId","columnOrder","columnOperator","columns","columnFormulaOrderId","columnFormula","className","onDragEnd","result","destination","source","sourceCol","destinationCol","startTaskIds","Array","from","operatorsIds","splice","removed","newStartCol","endTaskIds","newEndCol","newState","newColumn","startIndex","endIndex","newTaskIds","reorderColumnList","operatorId","operator","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.835d4e9e.chunk.js","sourcesContent":["import Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\ninterface Ioperator {\r\n  onchangeLeftInput: React.ChangeEventHandler<\r\n    HTMLInputElement | HTMLTextAreaElement\r\n  >;\r\n  onchangeRightInput: React.ChangeEventHandler<\r\n    HTMLInputElement | HTMLTextAreaElement\r\n  >;\r\n  children: JSX.Element;\r\n}\r\n\r\nexport const Operator = ({\r\n  onchangeLeftInput,\r\n  onchangeRightInput,\r\n  children\r\n}: Ioperator) => {\r\n  return (\r\n    <>\r\n      <Box\r\n        style={{\r\n          display: \"flex\",\r\n          backgroundColor: \"yellowGreen\",\r\n          width: \"250px\",\r\n          alignItems: \"center\",\r\n          padding: \"10px 10px 10px 10px\",\r\n          borderRadius: \"10px\"\r\n        }}\r\n      >\r\n        <Box\r\n          style={{\r\n            width: \"40%\",\r\n            backgroundColor: \"white\",\r\n            borderRadius: \"10px\"\r\n          }}\r\n        >\r\n          <TextField onChange={onchangeLeftInput} />\r\n        </Box>\r\n        <Box\r\n          style={{\r\n            width: \"20%\"\r\n          }}\r\n        >\r\n          {children}\r\n        </Box>\r\n        <Box\r\n          style={{\r\n            width: \"40%\",\r\n            backgroundColor: \"white\",\r\n            borderRadius: \"10px\"\r\n          }}\r\n        >\r\n          <TextField onChange={onchangeRightInput} />\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { Operator } from \"./operator\";\r\nexport const Sum = () => {\r\n  const [left, setLeft] = useState(\"\");\r\n  const [right, setRight] = useState(\"\");\r\n  const [structureSum, setStructureSum] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (left.length !== 0 && right.length !== 0) {\r\n      setStructureSum({\r\n        add: [JSON.parse(left), JSON.parse(right)]\r\n      });\r\n    }\r\n  }, [left, right]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"structureSum: \", structureSum);\r\n  }, [structureSum]);\r\n\r\n  const onchangeLeftInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let valueLeft = event.target.value;\r\n    setLeft(valueLeft);\r\n  };\r\n\r\n  const onchangeRightInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let valueRight = event.target.value;\r\n    setRight(valueRight);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Operator\r\n        onchangeLeftInput={onchangeLeftInput}\r\n        onchangeRightInput={onchangeRightInput}\r\n      >\r\n        <AddIcon />\r\n      </Operator>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport RemoveIcon from \"@mui/icons-material/Remove\";\r\nimport { Operator } from \"./operator\";\r\n\r\nexport const Subtract = () => {\r\n  const [left, setLeft] = useState(\"\");\r\n  const [right, setRight] = useState(\"\");\r\n  const [structureSubtract, setStructureSubtract] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (left.length !== 0 && right.length !== 0) {\r\n      setStructureSubtract({\r\n        sub: [JSON.parse(left), JSON.parse(right)]\r\n      });\r\n    }\r\n  }, [left, right]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"structureSubtract: \", structureSubtract);\r\n  }, [structureSubtract]);\r\n\r\n  const onchangeLeftInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let valueLeft = event.target.value;\r\n    setLeft(valueLeft);\r\n  };\r\n\r\n  const onchangeRightInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let valueRight = event.target.value;\r\n    setRight(valueRight);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Operator\r\n        onchangeLeftInput={onchangeLeftInput}\r\n        onchangeRightInput={onchangeRightInput}\r\n      >\r\n        <RemoveIcon />\r\n      </Operator>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport ClearIcon from \"@mui/icons-material/Clear\";\r\nimport { Operator } from \"./operator\";\r\n\r\nexport const Multiplication = () => {\r\n  const [left, setLeft] = useState(\"\");\r\n  const [right, setRight] = useState(\"\");\r\n  const [structureMultiplication, setStructureMultiplication] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (left.length !== 0 && right.length !== 0) {\r\n      setStructureMultiplication({\r\n        mul: [JSON.parse(left), JSON.parse(right)]\r\n      });\r\n    }\r\n  }, [left, right]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"structureMultiplication: \", structureMultiplication);\r\n  }, [structureMultiplication]);\r\n\r\n  const onchangeLeftInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let valueLeft = event.target.value;\r\n    setLeft(valueLeft);\r\n  };\r\n\r\n  const onchangeRightInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let valueRight = event.target.value;\r\n    setRight(valueRight);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Operator\r\n        onchangeLeftInput={onchangeLeftInput}\r\n        onchangeRightInput={onchangeRightInput}\r\n      >\r\n        <ClearIcon />\r\n      </Operator>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport ShowChartIcon from \"@mui/icons-material/ShowChart\";\r\nimport { Operator } from \"./operator\";\r\n\r\nexport const Div = () => {\r\n  const [left, setLeft] = useState(\"\");\r\n  const [right, setRight] = useState(\"\");\r\n  const [structureDiv, setStructureDiv] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (left.length !== 0 && right.length !== 0) {\r\n      setStructureDiv({\r\n        truediv: [JSON.parse(left), JSON.parse(right)]\r\n      });\r\n    }\r\n  }, [left, right]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"structureMultiplication: \", structureDiv);\r\n  }, [structureDiv]);\r\n\r\n  const onchangeLeftInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let valueLeft = event.target.value;\r\n    setLeft(valueLeft);\r\n  };\r\n\r\n  const onchangeRightInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let valueRight = event.target.value;\r\n    setRight(valueRight);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Operator\r\n        onchangeLeftInput={onchangeLeftInput}\r\n        onchangeRightInput={onchangeRightInput}\r\n      >\r\n        <ShowChartIcon />\r\n      </Operator>\r\n    </>\r\n  );\r\n};\r\n","import Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport ShortTextIcon from \"@mui/icons-material/ShortText\";\r\ninterface IassignMethod {\r\n  onchangeLeftInput: React.ChangeEventHandler<\r\n    HTMLInputElement | HTMLTextAreaElement\r\n  >;\r\n  children: JSX.Element;\r\n}\r\n\r\nexport const AssignMethod = ({\r\n  onchangeLeftInput,\r\n  children\r\n}: IassignMethod) => {\r\n  return (\r\n    <>\r\n      <Box\r\n        style={{\r\n          display: \"flex\",\r\n          backgroundColor: \"yellowGreen\",\r\n          width: \"450px\",\r\n          alignItems: \"center\",\r\n          padding: \"10px 10px 10px 10px\",\r\n          borderRadius: \"10px\"\r\n        }}\r\n      >\r\n        <Box\r\n          style={{\r\n            width: \"150px\",\r\n            backgroundColor: \"white\",\r\n            borderRadius: \"10px\"\r\n          }}\r\n        >\r\n          <TextField onChange={onchangeLeftInput} />\r\n        </Box>\r\n        <Box\r\n          style={{\r\n            width: \"50px\"\r\n          }}\r\n        >\r\n          <ShortTextIcon />\r\n        </Box>\r\n        <Box\r\n          style={{\r\n            width: \"auto\",\r\n            backgroundColor: \"white\",\r\n            borderRadius: \"10px\"\r\n          }}\r\n        >\r\n          {children}\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { AssignMethod } from \"./assignMethod\";\r\ninterface Iassign {\r\n  children: JSX.Element;\r\n}\r\n\r\nexport const Assign = ({ children }: Iassign) => {\r\n  React.Children.forEach(children, (element) => {\r\n    if (!React.isValidElement(element)) return;\r\n    console.log(\"element\", element.props);\r\n  });\r\n  const [left, setLeft] = useState(\"\");\r\n  const [right, setRight] = useState(\"\");\r\n  const [structureEqual, setStructureEqual] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (left.length !== 0 && right.length !== 0) {\r\n      setStructureEqual({\r\n        assign: [JSON.parse(left), JSON.parse(right)]\r\n      });\r\n    }\r\n  }, [left, right]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"structureEqual: \", structureEqual);\r\n  }, [structureEqual]);\r\n\r\n  const onchangeLeftInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let valueLeft = event.target.value;\r\n    setLeft(valueLeft);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AssignMethod onchangeLeftInput={onchangeLeftInput}>\r\n        {children}\r\n      </AssignMethod>\r\n    </>\r\n  );\r\n};\r\n","import Box from \"@mui/material/Box\";\r\nimport { Droppable, Draggable } from \"@hello-pangea/dnd\";\r\nimport { Columns } from \"./../contracts/columns\";\r\n\r\nexport const OperatorColumn = ({ column, items }: Columns) => {\r\n  return (\r\n    <div>\r\n      <h3> {column.title} </h3>\r\n      <Droppable droppableId={column.id}>\r\n        {(droppableProvider) => (\r\n          <div\r\n            style={{ margin: \"10px\" }}\r\n            {...droppableProvider.droppableProps}\r\n            ref={droppableProvider.innerRef}\r\n          >\r\n            {items?.map((item, i) => {\r\n              console.log(\"item\", item);\r\n\r\n              return (\r\n                <Draggable draggableId={`${item.id}`} index={i} key={item.id}>\r\n                  {(draggableProvider) => (\r\n                    <Box style={{ margin: \"10px\" }}>\r\n                      <div\r\n                        {...draggableProvider.draggableProps}\r\n                        ref={draggableProvider.innerRef}\r\n                        {...draggableProvider.dragHandleProps}\r\n                      >\r\n                        {item.components}\r\n                      </div>\r\n                    </Box>\r\n                  )}\r\n                </Draggable>\r\n              );\r\n            })}\r\n            {droppableProvider.placeholder}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n","import Box from \"@mui/material/Box\";\r\nimport { Droppable, Draggable } from \"@hello-pangea/dnd\";\r\nimport { Columns } from \"./../contracts/columns\";\r\nexport const FormulaColumn = ({ column, items }: Columns) => {\r\n  return (\r\n    <div>\r\n      <h3> {column.title} </h3>\r\n      <Box\r\n        style={{\r\n          minWidth: \"550px\",\r\n          minHeight: \"350px\",\r\n          height: \"auto\",\r\n          width: \"auto\",\r\n          backgroundColor: \"lightgray\",\r\n          borderRadius: \"10px\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          padding: \"30px\"\r\n        }}\r\n      >\r\n        <Box\r\n          style={{\r\n            minWidth: \"500px\",\r\n            minHeight: \"300px\",\r\n            height: \"auto\",\r\n            width: \"auto\",\r\n            backgroundColor: \"white\",\r\n            borderRadius: \"10px\"\r\n          }}\r\n        >\r\n          <Droppable droppableId={column.id}>\r\n            {(droppableProvider) => (\r\n              <div\r\n                style={{ margin: \"10px\" }}\r\n                {...droppableProvider.droppableProps}\r\n                ref={droppableProvider.innerRef}\r\n              >\r\n                {items?.map((item, i) => (\r\n                  <Draggable draggableId={`${item.id}`} index={i} key={item.id}>\r\n                    {(draggableProvider) => (\r\n                      <Box style={{ margin: \"10px\" }}>\r\n                        <div\r\n                          {...draggableProvider.draggableProps}\r\n                          ref={draggableProvider.innerRef}\r\n                          {...draggableProvider.dragHandleProps}\r\n                        >\r\n                          {item.components}\r\n                        </div>\r\n                      </Box>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {droppableProvider.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </Box>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport { Sum } from \"./operators/components/sum\";\nimport { Subtract } from \"./operators/components/Subtract\";\nimport { Multiplication } from \"./operators/components/multiplication\";\nimport { Div } from \"./operators/components/div\";\nimport { Assign } from \"./operators/components/assing\";\nimport { DragDropContext } from \"@hello-pangea/dnd\";\nimport { OperatorColumn } from \"./dragAndDrop/OperatorColumn\";\nimport { FormulaColumn } from \"./dragAndDrop/FormulaColumn\";\nexport default function App() {\n  const [operators, setOperators] = useState(init_state);\n\n  const reorderColumnList = (sourceCol, startIndex, endIndex) => {\n    const newTaskIds = Array.from(sourceCol.operatorsIds);\n    const [removed] = newTaskIds.splice(startIndex, 1);\n    newTaskIds.splice(endIndex, 0, removed);\n\n    const newColumn = {\n      ...sourceCol,\n      operatorsIds: newTaskIds\n    };\n\n    return newColumn;\n  };\n\n  const onDragEnd = (result) => {\n    const { destination, source } = result;\n\n    // If user tries to drop in an unknown destination\n    if (!destination) return;\n\n    // if the user drags and drops back in the same position\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    // If the user drops within the same column but in a different positoin\n    const sourceCol = operators.columns[source.droppableId];\n    const destinationCol = operators.columns[destination.droppableId];\n\n    if (sourceCol.id === destinationCol.id) {\n      const newColumn = reorderColumnList(\n        sourceCol,\n        source.index,\n        destination.index\n      );\n\n      const newState = {\n        ...operators,\n        columns: {\n          ...operators.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      setOperators(newState);\n      return;\n    }\n\n    // If the user moves from one column to another\n    const startTaskIds = Array.from(sourceCol.operatorsIds);\n    const [removed] = startTaskIds.splice(source.index, 1);\n    const newStartCol = {\n      ...sourceCol,\n      operatorsIds: startTaskIds\n    };\n\n    const endTaskIds = Array.from(destinationCol.operatorsIds);\n    endTaskIds.splice(destination.index, 0, removed);\n    const newEndCol = {\n      ...destinationCol,\n      operatorsIds: endTaskIds\n    };\n\n    const newState = {\n      ...operators,\n      columns: {\n        ...operators.columns,\n        [newStartCol.id]: newStartCol,\n        [newEndCol.id]: newEndCol\n      }\n    };\n\n    setOperators(newState);\n  };\n\n  const columnOperatorOrderId = operators.columnOrder[0];\n  const columnOperator = operators.columns[columnOperatorOrderId];\n\n  const columnFormulaOrderId = operators.columnOrder[1];\n  const columnFormula = operators.columns[columnFormulaOrderId];\n  return (\n    <div className=\"App\">\n      <DragDropContext onDragEnd={onDragEnd}>\n        <OperatorColumn\n          key={columnOperatorOrderId}\n          column={columnOperator}\n          items={columnOperator.operatorsIds.map(\n            (operatorId) => operators.operator[operatorId]\n          )}\n        />\n        {/* {} */}\n        <FormulaColumn\n          key={columnFormulaOrderId}\n          column={columnFormula}\n          items={columnFormula.operatorsIds.map(\n            (operatorId) => operators.operator[operatorId]\n          )}\n        />\n      </DragDropContext>\n    </div>\n  );\n}\n\nconst init_state = {\n  operator: {\n    1: { id: 1, components: <Multiplication /> },\n    2: { id: 2, components: <Subtract /> },\n    3: { id: 3, components: <Sum /> },\n    4: { id: 4, components: <Div /> },\n    5: { id: 5, components: <Assign> </Assign> }\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"Operadores\",\n      operatorsIds: [1, 2, 3, 4, 5]\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"Formula\",\n      operatorsIds: []\n    }\n  },\n  // Facilitate reordering of the columns\n  columnOrder: [\"column-1\", \"column-2\"]\n};\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}